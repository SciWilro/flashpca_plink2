% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flashpca.R
\name{flashpca}
\alias{flashpca}
\title{Principal Component Analysis using flashpca}
\usage{
flashpca(X, ndim = 10, stand = c("binom2", "binom", "sd", "center", "none"),
  divisor = c("p", "n", "none"), maxiter = 100, tol = 1e-04, seed = 1,
  blocksize = 1000, verbose = FALSE, do_loadings = FALSE,
  check_geno = TRUE, return_scale = TRUE)
}
\arguments{
\item{X}{A numeric matrix to perform PCA on. X must not have any NAs.}

\item{ndim}{Integer. How many dimensions to return in results.}

\item{stand}{A character string indicating how to standardize X before PCA,
one of "binom" (old Eigenstrat-style), "binom2" (new Eigenstrat-style),
"sd" (zero-mean unit-variance), "center" (zero mean), or "none".}

\item{divisor}{A character string indicating whether to divide the
eigenvalues by number of columns of X ("p"), the number of 
rows of X minus 1 ("n1") or none ("none").}

\item{maxiter}{Integer. How many iterations to use in PCA.}

\item{tol}{Numeric. Tolerance for determining PCA convergence.}

\item{seed}{Integer. Seed for random number generator.}

\item{blocksize}{Integer. Block size for PCA on PLINK files.}

\item{verbose}{logical. More verbose output.}

\item{do_loadings}{Logical. Whether to compute loadings (matrix V from SVD).}

\item{check_geno}{Logical. Whether to explicitly check if the matrix X
contains values other than {0, 1, 2}, when stand="binom". This can be
be set to FALSE if you are sure your matrix only contains these values
(only matters when using stand="binom").}

\item{return_scale}{Logical. Whether to return the means and standard
deviations used in standardizing the matrix X.}
}
\value{
\code{flashpca} returns a list containing the following components:
\describe{  
   \item{values}{a numeric vector. The eigenvalues of X X' / m.}
   \item{vectors}{a numeric matrix. The eigenvectors of X X' / m.}
   \item{projection}{a numeric matrix. Equivalent to X V.}
   \item{loadings}{a numeric matrix. The matrix of variable loadings, i.e., V
   from SVD.}
   \item{scale}{a list of two elements, ``center'' and ''scale'', which was
 used to standardize the input matrix X.}
}
}
\description{
Principal Component Analysis using flashpca
}
\details{
The default decomposition is of X X' / m, where m is the number of SNPs
   (the denominator can be changed using the 'divisor' argument).

   The data is standardised by default. \code{stand = "binom"} uses the old Eigensoft
   (Price 2006) formulation of
       \deqn{p_j = sum_{i=1}^n X_{i,j} / (2 * n)}
       \deqn{mean_j = 2 * p}
       \deqn{sd_j = sqrt(p * (1 - p)),}
   where j is the index for the SNP and i is the index for the sample.
   Alternatively, `stand = "binom2"' uses the newer formula, which is
   similar to the above except for
       \deqn{sd_j = sqrt(2 * p * (1 - p)).}
}
\examples{

set.seed(123)

## Toy example
n <- 200
p <- 500
x <- matrix(rnorm(n * p), n, p)
ndim <- 20
f1 <- flashpca(x, stand="sd", ndim=ndim)

r <- prcomp(x, center=TRUE, scale.=TRUE)

## Compare eigenvalues
eval <- cbind(r$sdev[1:ndim]^2, f1$values)
cor(eval)
mean((eval[,1] - eval[,2])^2)

## Compare eigenvectors
cor(r$x[, 1:ndim], f1$projection)

\dontrun{
## First get data from
## https://github.com/gabraham/flashpca/blob/devel/HapMap3/data.RData
##
## Missing genotypes have been imputed randomly according to genotype
## proportions in each SNP.
load("data.RData")
ndim <- 20
system.time({
   f <- flashpca(hapmap3$bed, stand="center", ndim=ndim)
})
system.time({
   r <- prcomp(hapmap3$bed)
})

eval <- cbind(r$sdev[1:ndim]^2, f$values)
cor(eval)
mean((eval[,1] - eval[,2])^2)

## Compare eigenvectors
diag(cor(r$x[, 1:ndim], f$projection))
}

}

