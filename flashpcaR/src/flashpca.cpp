// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

#include <Eigen/Core>
#include <Eigen/Dense>
#include <Eigen/Eigen>

using namespace Rcpp;
using namespace Eigen;

#include "randompca.hpp"

// [[Rcpp::export]]
List flashpca_internal(
   Eigen::Map<Eigen::MatrixXd> X,
   int stand,
   unsigned int ndim,
   unsigned int maxiter,
   double tol,
   long seed,
   bool verbose,
   bool do_loadings,
   bool return_scale)
{
   Eigen::MatrixXd Xm = X;

   RandomPCA rpca;
   rpca.stand_method_x = stand;
   rpca.verbose = verbose;

   rpca.pca_fast(Xm, 0, ndim, maxiter,
      tol, seed, do_loadings);
   
   NumericMatrix U(wrap(rpca.U));
   NumericMatrix P(wrap(rpca.Px));
   NumericVector d(wrap(rpca.d));

   NumericVector X_mean(0);
   NumericVector X_sd(0);

   // STANDARDIZE_NONE: 0
   if(return_scale && stand != 0)
   {
      NumericMatrix X_meansd(wrap(rpca.X_meansd));
      X_mean = X_meansd(_, 0);
      X_sd = X_meansd(_, 1);
   }
   
   Rcpp::List res;

   if(do_loadings)
   {
      NumericMatrix V(wrap(rpca.V));
      res = Rcpp::List::create(
         Rcpp::Named("values")=d,
         Rcpp::Named("vectors")=U,
         Rcpp::Named("projection")=P,
	 Rcpp::Named("loadings")=V,
	 Rcpp::Named("center")=X_mean,
	 Rcpp::Named("scale")=X_sd
      );
   }
   else
   {
      res = Rcpp::List::create(
         Rcpp::Named("values")=d,
         Rcpp::Named("vectors")=U,
         Rcpp::Named("projection")=P,
	 Rcpp::Named("center")=X_mean,
	 Rcpp::Named("scale")=X_sd
      );
   }

   return res;
}

// [[Rcpp::export]]
List flashpca_plink_internal(
   std::string fn,
   int stand,
   unsigned int ndim,
   unsigned int maxiter,
   unsigned int block_size,
   double tol,
   long seed,
   bool verbose,
   bool do_loadings,
   bool return_scale)
{
   RandomPCA rpca;
   rpca.stand_method_x = stand;
   rpca.divisor = DIVISOR_P;
   rpca.verbose = verbose;

   NumericVector X_mean(0);
   NumericVector X_sd(0);

   std::string fam_file, geno_file, bim_file, pheno_file;
   geno_file = fn + std::string(".bed");
   bim_file = fn + std::string(".bim");
   fam_file = fn + std::string(".fam");

   Data data(seed);
   data.verbose = verbose;
   data.stand_method_x = stand; 
   data.read_pheno(fam_file.c_str(), 6);
   data.read_plink_bim(bim_file.c_str());
   data.geno_filename = geno_file.c_str();
   data.get_size();
   data.prepare();

   rpca.pca_fast(data, block_size, ndim,
      maxiter, tol, seed, do_loadings);
   
   NumericMatrix U(wrap(rpca.U));
   NumericMatrix P(wrap(rpca.Px));
   NumericVector d(wrap(rpca.d));

   Rcpp::List res;

   // STANDARDIZE_NONE: 0
   if(return_scale && stand != 0)
   {
      NumericMatrix X_meansd(wrap(rpca.X_meansd));
      X_mean = X_meansd(_, 0);
      X_sd = X_meansd(_, 1);
   }

   if(do_loadings)
   {
      NumericMatrix V(wrap(rpca.V));
      res = Rcpp::List::create(
         Rcpp::Named("values")=d,
         Rcpp::Named("vectors")=U,
         Rcpp::Named("projection")=P,
	 Rcpp::Named("loadings")=V,
	 Rcpp::Named("center")=X_mean,
	 Rcpp::Named("scale")=X_sd
      );
   }
   else
   {
      res = Rcpp::List::create(
         Rcpp::Named("values")=d,
         Rcpp::Named("vectors")=U,
         Rcpp::Named("projection")=P,
	 Rcpp::Named("center")=X_mean,
	 Rcpp::Named("scale")=X_sd
      );
   }

   return res;
}

// [[Rcpp::export]]
List scca_internal(Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::MatrixXd> Y,
   double lambda1, double lambda2, unsigned int ndim, int stand,
   int mem, long seed, int maxiter,  double tol,
   bool verbose, unsigned int num_threads, bool useV,
   Eigen::Map<Eigen::MatrixXd> Vinit)
{
#ifdef _OPENMP
   omp_set_num_threads(num_threads);
#endif

   Eigen::MatrixXd Xm = X;
   Eigen::MatrixXd Ym = Y;

   RandomPCA rpca;
   rpca.stand_method_x = stand;
   rpca.verbose = verbose;

   if(useV)
   {
      Eigen::MatrixXd Vm = Vinit;
      rpca.scca(Xm, Ym, lambda1, lambda2, seed, ndim, mem, maxiter, tol, Vm);
   }
   else
      rpca.scca(Xm, Ym, lambda1, lambda2, seed, ndim, mem, maxiter, tol);

   NumericMatrix U(wrap(rpca.U));
   NumericMatrix V(wrap(rpca.V));
   NumericMatrix Px(wrap(rpca.Px));
   NumericMatrix Py(wrap(rpca.Py));
   NumericVector d(wrap(rpca.d));

   Rcpp::List res;

   res = Rcpp::List::create(
	 Rcpp::Named("U")=U,
         Rcpp::Named("V")=V,
         Rcpp::Named("d")=d,
         Rcpp::Named("Px")=Px,
         Rcpp::Named("Py")=Py
   );

   return res;
}

